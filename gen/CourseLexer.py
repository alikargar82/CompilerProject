# Generated from /home/ali/CompilerProject/Course.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,289,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
        1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,
        11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,
        16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,209,8,17,1,18,1,18,1,18,1,
        18,5,18,215,8,18,10,18,12,18,218,9,18,1,18,1,18,1,19,3,19,223,8,
        19,1,19,1,19,1,19,3,19,228,8,19,1,19,1,19,3,19,232,8,19,1,19,3,19,
        235,8,19,1,20,1,20,1,20,5,20,240,8,20,10,20,12,20,243,9,20,3,20,
        245,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,256,8,
        21,1,22,4,22,259,8,22,11,22,12,22,260,1,22,1,22,1,23,1,23,1,23,1,
        23,5,23,269,8,23,10,23,12,23,272,9,23,1,23,1,23,1,24,1,24,1,24,1,
        24,5,24,280,8,24,10,24,12,24,283,9,24,1,24,1,24,1,24,1,24,1,24,1,
        281,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,1,0,7,4,0,10,10,13,13,34,34,92,92,2,0,69,69,101,101,
        2,0,43,43,45,45,1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,
        10,13,13,304,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,1,51,1,0,0,0,3,73,1,0,0,0,5,80,1,0,0,0,7,89,1,0,0,0,9,103,
        1,0,0,0,11,111,1,0,0,0,13,118,1,0,0,0,15,125,1,0,0,0,17,132,1,0,
        0,0,19,138,1,0,0,0,21,146,1,0,0,0,23,148,1,0,0,0,25,150,1,0,0,0,
        27,152,1,0,0,0,29,154,1,0,0,0,31,156,1,0,0,0,33,158,1,0,0,0,35,208,
        1,0,0,0,37,210,1,0,0,0,39,222,1,0,0,0,41,244,1,0,0,0,43,255,1,0,
        0,0,45,258,1,0,0,0,47,264,1,0,0,0,49,275,1,0,0,0,51,52,5,34,0,0,
        52,53,5,99,0,0,53,54,5,111,0,0,54,55,5,117,0,0,55,56,5,114,0,0,56,
        57,5,115,0,0,57,58,5,101,0,0,58,59,5,95,0,0,59,60,5,105,0,0,60,61,
        5,110,0,0,61,62,5,116,0,0,62,63,5,114,0,0,63,64,5,111,0,0,64,65,
        5,100,0,0,65,66,5,117,0,0,66,67,5,99,0,0,67,68,5,116,0,0,68,69,5,
        105,0,0,69,70,5,111,0,0,70,71,5,110,0,0,71,72,5,34,0,0,72,2,1,0,
        0,0,73,74,5,34,0,0,74,75,5,110,0,0,75,76,5,97,0,0,76,77,5,109,0,
        0,77,78,5,101,0,0,78,79,5,34,0,0,79,4,1,0,0,0,80,81,5,34,0,0,81,
        82,5,97,0,0,82,83,5,117,0,0,83,84,5,116,0,0,84,85,5,104,0,0,85,86,
        5,111,0,0,86,87,5,114,0,0,87,88,5,34,0,0,88,6,1,0,0,0,89,90,5,34,
        0,0,90,91,5,100,0,0,91,92,5,101,0,0,92,93,5,115,0,0,93,94,5,99,0,
        0,94,95,5,114,0,0,95,96,5,105,0,0,96,97,5,112,0,0,97,98,5,116,0,
        0,98,99,5,105,0,0,99,100,5,111,0,0,100,101,5,110,0,0,101,102,5,34,
        0,0,102,8,1,0,0,0,103,104,5,34,0,0,104,105,5,108,0,0,105,106,5,101,
        0,0,106,107,5,118,0,0,107,108,5,101,0,0,108,109,5,108,0,0,109,110,
        5,34,0,0,110,10,1,0,0,0,111,112,5,34,0,0,112,113,5,116,0,0,113,114,
        5,97,0,0,114,115,5,103,0,0,115,116,5,115,0,0,116,117,5,34,0,0,117,
        12,1,0,0,0,118,119,5,34,0,0,119,120,5,102,0,0,120,121,5,108,0,0,
        121,122,5,111,0,0,122,123,5,119,0,0,123,124,5,34,0,0,124,14,1,0,
        0,0,125,126,5,34,0,0,126,127,5,116,0,0,127,128,5,121,0,0,128,129,
        5,112,0,0,129,130,5,101,0,0,130,131,5,34,0,0,131,16,1,0,0,0,132,
        133,5,34,0,0,133,134,5,114,0,0,134,135,5,101,0,0,135,136,5,102,0,
        0,136,137,5,34,0,0,137,18,1,0,0,0,138,139,5,34,0,0,139,140,5,109,
        0,0,140,141,5,111,0,0,141,142,5,100,0,0,142,143,5,101,0,0,143,144,
        5,115,0,0,144,145,5,34,0,0,145,20,1,0,0,0,146,147,5,123,0,0,147,
        22,1,0,0,0,148,149,5,125,0,0,149,24,1,0,0,0,150,151,5,91,0,0,151,
        26,1,0,0,0,152,153,5,93,0,0,153,28,1,0,0,0,154,155,5,44,0,0,155,
        30,1,0,0,0,156,157,5,58,0,0,157,32,1,0,0,0,158,159,5,110,0,0,159,
        160,5,117,0,0,160,161,5,108,0,0,161,162,5,108,0,0,162,34,1,0,0,0,
        163,164,5,34,0,0,164,165,5,114,0,0,165,166,5,101,0,0,166,167,5,103,
        0,0,167,168,5,105,0,0,168,169,5,115,0,0,169,170,5,116,0,0,170,171,
        5,114,0,0,171,172,5,97,0,0,172,173,5,116,0,0,173,174,5,105,0,0,174,
        175,5,111,0,0,175,176,5,110,0,0,176,209,5,34,0,0,177,178,5,34,0,
        0,178,179,5,99,0,0,179,180,5,104,0,0,180,181,5,97,0,0,181,182,5,
        112,0,0,182,183,5,116,0,0,183,184,5,101,0,0,184,185,5,114,0,0,185,
        209,5,34,0,0,186,187,5,34,0,0,187,188,5,113,0,0,188,189,5,117,0,
        0,189,190,5,105,0,0,190,191,5,122,0,0,191,209,5,34,0,0,192,193,5,
        34,0,0,193,194,5,101,0,0,194,195,5,120,0,0,195,196,5,97,0,0,196,
        197,5,109,0,0,197,209,5,34,0,0,198,199,5,34,0,0,199,200,5,114,0,
        0,200,201,5,101,0,0,201,202,5,115,0,0,202,203,5,111,0,0,203,204,
        5,117,0,0,204,205,5,114,0,0,205,206,5,99,0,0,206,207,5,101,0,0,207,
        209,5,34,0,0,208,163,1,0,0,0,208,177,1,0,0,0,208,186,1,0,0,0,208,
        192,1,0,0,0,208,198,1,0,0,0,209,36,1,0,0,0,210,216,5,34,0,0,211,
        215,8,0,0,0,212,213,5,92,0,0,213,215,9,0,0,0,214,211,1,0,0,0,214,
        212,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,
        219,1,0,0,0,218,216,1,0,0,0,219,220,5,34,0,0,220,38,1,0,0,0,221,
        223,5,45,0,0,222,221,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,
        227,3,41,20,0,225,226,5,46,0,0,226,228,3,41,20,0,227,225,1,0,0,0,
        227,228,1,0,0,0,228,234,1,0,0,0,229,231,7,1,0,0,230,232,7,2,0,0,
        231,230,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,235,3,41,20,
        0,234,229,1,0,0,0,234,235,1,0,0,0,235,40,1,0,0,0,236,245,5,48,0,
        0,237,241,7,3,0,0,238,240,7,4,0,0,239,238,1,0,0,0,240,243,1,0,0,
        0,241,239,1,0,0,0,241,242,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,
        0,244,236,1,0,0,0,244,237,1,0,0,0,245,42,1,0,0,0,246,247,5,116,0,
        0,247,248,5,114,0,0,248,249,5,117,0,0,249,256,5,101,0,0,250,251,
        5,102,0,0,251,252,5,97,0,0,252,253,5,108,0,0,253,254,5,115,0,0,254,
        256,5,101,0,0,255,246,1,0,0,0,255,250,1,0,0,0,256,44,1,0,0,0,257,
        259,7,5,0,0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,260,
        261,1,0,0,0,261,262,1,0,0,0,262,263,6,22,0,0,263,46,1,0,0,0,264,
        265,5,47,0,0,265,266,5,47,0,0,266,270,1,0,0,0,267,269,8,6,0,0,268,
        267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,
        273,1,0,0,0,272,270,1,0,0,0,273,274,6,23,0,0,274,48,1,0,0,0,275,
        276,5,47,0,0,276,277,5,42,0,0,277,281,1,0,0,0,278,280,9,0,0,0,279,
        278,1,0,0,0,280,283,1,0,0,0,281,282,1,0,0,0,281,279,1,0,0,0,282,
        284,1,0,0,0,283,281,1,0,0,0,284,285,5,42,0,0,285,286,5,47,0,0,286,
        287,1,0,0,0,287,288,6,24,0,0,288,50,1,0,0,0,14,0,208,214,216,222,
        227,231,234,241,244,255,260,270,281,1,6,0,0
    ]

class CourseLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    LBRACE = 11
    RBRACE = 12
    LBRACKET = 13
    RBRACKET = 14
    COMMA = 15
    COLON = 16
    NULL = 17
    TYPES = 18
    STRING = 19
    NUMBER = 20
    INT = 21
    BOOLEAN = 22
    WS = 23
    LINE_COMMENT = 24
    BLOCK_COMMENT = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\"course_introduction\"'", "'\"name\"'", "'\"author\"'", "'\"description\"'", 
            "'\"level\"'", "'\"tags\"'", "'\"flow\"'", "'\"type\"'", "'\"ref\"'", 
            "'\"modes\"'", "'{'", "'}'", "'['", "']'", "','", "':'", "'null'" ]

    symbolicNames = [ "<INVALID>",
            "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COMMA", "COLON", 
            "NULL", "TYPES", "STRING", "NUMBER", "INT", "BOOLEAN", "WS", 
            "LINE_COMMENT", "BLOCK_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "LBRACE", "RBRACE", "LBRACKET", 
                  "RBRACKET", "COMMA", "COLON", "NULL", "TYPES", "STRING", 
                  "NUMBER", "INT", "BOOLEAN", "WS", "LINE_COMMENT", "BLOCK_COMMENT" ]

    grammarFileName = "Course.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


