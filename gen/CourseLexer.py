# Generated from /home/ali/CompilerProject/Course.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,24,280,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,
        14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,200,
        8,16,1,17,1,17,1,17,1,17,5,17,206,8,17,10,17,12,17,209,9,17,1,17,
        1,17,1,18,3,18,214,8,18,1,18,1,18,1,18,3,18,219,8,18,1,18,1,18,3,
        18,223,8,18,1,18,3,18,226,8,18,1,19,1,19,1,19,5,19,231,8,19,10,19,
        12,19,234,9,19,3,19,236,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,3,20,247,8,20,1,21,4,21,250,8,21,11,21,12,21,251,1,21,
        1,21,1,22,1,22,1,22,1,22,5,22,260,8,22,10,22,12,22,263,9,22,1,22,
        1,22,1,23,1,23,1,23,1,23,5,23,271,8,23,10,23,12,23,274,9,23,1,23,
        1,23,1,23,1,23,1,23,1,272,0,24,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,1,0,7,4,0,10,10,13,13,34,34,92,
        92,2,0,69,69,101,101,2,0,43,43,45,45,1,0,49,57,1,0,48,57,3,0,9,10,
        13,13,32,32,2,0,10,10,13,13,295,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,1,49,1,0,0,0,3,71,1,0,0,0,5,78,1,0,0,0,7,87,1,0,0,
        0,9,101,1,0,0,0,11,109,1,0,0,0,13,116,1,0,0,0,15,123,1,0,0,0,17,
        129,1,0,0,0,19,137,1,0,0,0,21,139,1,0,0,0,23,141,1,0,0,0,25,143,
        1,0,0,0,27,145,1,0,0,0,29,147,1,0,0,0,31,149,1,0,0,0,33,199,1,0,
        0,0,35,201,1,0,0,0,37,213,1,0,0,0,39,235,1,0,0,0,41,246,1,0,0,0,
        43,249,1,0,0,0,45,255,1,0,0,0,47,266,1,0,0,0,49,50,5,34,0,0,50,51,
        5,99,0,0,51,52,5,111,0,0,52,53,5,117,0,0,53,54,5,114,0,0,54,55,5,
        115,0,0,55,56,5,101,0,0,56,57,5,95,0,0,57,58,5,105,0,0,58,59,5,110,
        0,0,59,60,5,116,0,0,60,61,5,114,0,0,61,62,5,111,0,0,62,63,5,100,
        0,0,63,64,5,117,0,0,64,65,5,99,0,0,65,66,5,116,0,0,66,67,5,105,0,
        0,67,68,5,111,0,0,68,69,5,110,0,0,69,70,5,34,0,0,70,2,1,0,0,0,71,
        72,5,34,0,0,72,73,5,110,0,0,73,74,5,97,0,0,74,75,5,109,0,0,75,76,
        5,101,0,0,76,77,5,34,0,0,77,4,1,0,0,0,78,79,5,34,0,0,79,80,5,97,
        0,0,80,81,5,117,0,0,81,82,5,116,0,0,82,83,5,104,0,0,83,84,5,111,
        0,0,84,85,5,114,0,0,85,86,5,34,0,0,86,6,1,0,0,0,87,88,5,34,0,0,88,
        89,5,100,0,0,89,90,5,101,0,0,90,91,5,115,0,0,91,92,5,99,0,0,92,93,
        5,114,0,0,93,94,5,105,0,0,94,95,5,112,0,0,95,96,5,116,0,0,96,97,
        5,105,0,0,97,98,5,111,0,0,98,99,5,110,0,0,99,100,5,34,0,0,100,8,
        1,0,0,0,101,102,5,34,0,0,102,103,5,108,0,0,103,104,5,101,0,0,104,
        105,5,118,0,0,105,106,5,101,0,0,106,107,5,108,0,0,107,108,5,34,0,
        0,108,10,1,0,0,0,109,110,5,34,0,0,110,111,5,102,0,0,111,112,5,108,
        0,0,112,113,5,111,0,0,113,114,5,119,0,0,114,115,5,34,0,0,115,12,
        1,0,0,0,116,117,5,34,0,0,117,118,5,116,0,0,118,119,5,121,0,0,119,
        120,5,112,0,0,120,121,5,101,0,0,121,122,5,34,0,0,122,14,1,0,0,0,
        123,124,5,34,0,0,124,125,5,114,0,0,125,126,5,101,0,0,126,127,5,102,
        0,0,127,128,5,34,0,0,128,16,1,0,0,0,129,130,5,34,0,0,130,131,5,109,
        0,0,131,132,5,111,0,0,132,133,5,100,0,0,133,134,5,101,0,0,134,135,
        5,115,0,0,135,136,5,34,0,0,136,18,1,0,0,0,137,138,5,123,0,0,138,
        20,1,0,0,0,139,140,5,125,0,0,140,22,1,0,0,0,141,142,5,91,0,0,142,
        24,1,0,0,0,143,144,5,93,0,0,144,26,1,0,0,0,145,146,5,44,0,0,146,
        28,1,0,0,0,147,148,5,58,0,0,148,30,1,0,0,0,149,150,5,110,0,0,150,
        151,5,117,0,0,151,152,5,108,0,0,152,153,5,108,0,0,153,32,1,0,0,0,
        154,155,5,34,0,0,155,156,5,114,0,0,156,157,5,101,0,0,157,158,5,103,
        0,0,158,159,5,105,0,0,159,160,5,115,0,0,160,161,5,116,0,0,161,162,
        5,114,0,0,162,163,5,97,0,0,163,164,5,116,0,0,164,165,5,105,0,0,165,
        166,5,111,0,0,166,167,5,110,0,0,167,200,5,34,0,0,168,169,5,34,0,
        0,169,170,5,99,0,0,170,171,5,104,0,0,171,172,5,97,0,0,172,173,5,
        112,0,0,173,174,5,116,0,0,174,175,5,101,0,0,175,176,5,114,0,0,176,
        200,5,34,0,0,177,178,5,34,0,0,178,179,5,113,0,0,179,180,5,117,0,
        0,180,181,5,105,0,0,181,182,5,122,0,0,182,200,5,34,0,0,183,184,5,
        34,0,0,184,185,5,101,0,0,185,186,5,120,0,0,186,187,5,97,0,0,187,
        188,5,109,0,0,188,200,5,34,0,0,189,190,5,34,0,0,190,191,5,114,0,
        0,191,192,5,101,0,0,192,193,5,115,0,0,193,194,5,111,0,0,194,195,
        5,117,0,0,195,196,5,114,0,0,196,197,5,99,0,0,197,198,5,101,0,0,198,
        200,5,34,0,0,199,154,1,0,0,0,199,168,1,0,0,0,199,177,1,0,0,0,199,
        183,1,0,0,0,199,189,1,0,0,0,200,34,1,0,0,0,201,207,5,34,0,0,202,
        206,8,0,0,0,203,204,5,92,0,0,204,206,9,0,0,0,205,202,1,0,0,0,205,
        203,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,
        210,1,0,0,0,209,207,1,0,0,0,210,211,5,34,0,0,211,36,1,0,0,0,212,
        214,5,45,0,0,213,212,1,0,0,0,213,214,1,0,0,0,214,215,1,0,0,0,215,
        218,3,39,19,0,216,217,5,46,0,0,217,219,3,39,19,0,218,216,1,0,0,0,
        218,219,1,0,0,0,219,225,1,0,0,0,220,222,7,1,0,0,221,223,7,2,0,0,
        222,221,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,226,3,39,19,
        0,225,220,1,0,0,0,225,226,1,0,0,0,226,38,1,0,0,0,227,236,5,48,0,
        0,228,232,7,3,0,0,229,231,7,4,0,0,230,229,1,0,0,0,231,234,1,0,0,
        0,232,230,1,0,0,0,232,233,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,
        0,235,227,1,0,0,0,235,228,1,0,0,0,236,40,1,0,0,0,237,238,5,116,0,
        0,238,239,5,114,0,0,239,240,5,117,0,0,240,247,5,101,0,0,241,242,
        5,102,0,0,242,243,5,97,0,0,243,244,5,108,0,0,244,245,5,115,0,0,245,
        247,5,101,0,0,246,237,1,0,0,0,246,241,1,0,0,0,247,42,1,0,0,0,248,
        250,7,5,0,0,249,248,1,0,0,0,250,251,1,0,0,0,251,249,1,0,0,0,251,
        252,1,0,0,0,252,253,1,0,0,0,253,254,6,21,0,0,254,44,1,0,0,0,255,
        256,5,47,0,0,256,257,5,47,0,0,257,261,1,0,0,0,258,260,8,6,0,0,259,
        258,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,
        264,1,0,0,0,263,261,1,0,0,0,264,265,6,22,0,0,265,46,1,0,0,0,266,
        267,5,47,0,0,267,268,5,42,0,0,268,272,1,0,0,0,269,271,9,0,0,0,270,
        269,1,0,0,0,271,274,1,0,0,0,272,273,1,0,0,0,272,270,1,0,0,0,273,
        275,1,0,0,0,274,272,1,0,0,0,275,276,5,42,0,0,276,277,5,47,0,0,277,
        278,1,0,0,0,278,279,6,23,0,0,279,48,1,0,0,0,14,0,199,205,207,213,
        218,222,225,232,235,246,251,261,272,1,6,0,0
    ]

class CourseLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    LBRACE = 10
    RBRACE = 11
    LBRACKET = 12
    RBRACKET = 13
    COMMA = 14
    COLON = 15
    NULL = 16
    TYPES = 17
    STRING = 18
    NUMBER = 19
    INT = 20
    BOOLEAN = 21
    WS = 22
    LINE_COMMENT = 23
    BLOCK_COMMENT = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\"course_introduction\"'", "'\"name\"'", "'\"author\"'", "'\"description\"'", 
            "'\"level\"'", "'\"flow\"'", "'\"type\"'", "'\"ref\"'", "'\"modes\"'", 
            "'{'", "'}'", "'['", "']'", "','", "':'", "'null'" ]

    symbolicNames = [ "<INVALID>",
            "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COMMA", "COLON", 
            "NULL", "TYPES", "STRING", "NUMBER", "INT", "BOOLEAN", "WS", 
            "LINE_COMMENT", "BLOCK_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", 
                  "COMMA", "COLON", "NULL", "TYPES", "STRING", "NUMBER", 
                  "INT", "BOOLEAN", "WS", "LINE_COMMENT", "BLOCK_COMMENT" ]

    grammarFileName = "Course.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


